import FDBDatabase from "./FDBDatabase.js";
import FDBObjectStore from "./FDBObjectStore.js";
import FDBRequest from "./FDBRequest.js";
import FakeDOMStringList from "./lib/FakeDOMStringList.js";
import FakeEventTarget from "./lib/FakeEventTarget.js";
import { EventCallback, RequestObj, RollbackLog, TransactionMode } from "./lib/types.js";
declare class FDBTransaction extends FakeEventTarget {
    _state: "active" | "inactive" | "committing" | "finished";
    _started: boolean;
    _rollbackLog: RollbackLog;
    _objectStoresCache: Map<string, FDBObjectStore>;
    _lmdbTxnId: string;
    private _requestQueue;
    private _currentRequestIndex;
    private _requestResolvers;
    private _autoCommitTimer;
    objectStoreNames: FakeDOMStringList;
    mode: TransactionMode;
    db: FDBDatabase;
    error: Error | null;
    onabort: EventCallback | null;
    oncomplete: EventCallback | null;
    onerror: EventCallback | null;
    _scope: Set<string>;
    private _requests;
    constructor(storeNames: string[], mode: TransactionMode, db: FDBDatabase);
    _abort(errName: string | null): Promise<void>;
    abort(): void;
    objectStore(name: string): FDBObjectStore;
    private _waitForTurn;
    private _processNextRequest;
    private _checkComplete;
    private _scheduleAutoCommit;
    private _cancelAutoCommit;
    _execRequestAsync(obj: RequestObj): FDBRequest;
    _start(): Promise<void>;
    commit(): void;
    toString(): string;
}
export default FDBTransaction;
